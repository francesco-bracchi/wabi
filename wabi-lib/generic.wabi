(defn gen
    (dfn)
  (defn me them
    (let (r (apply dfn them))
      (apply (->> comb-meta me :generic r) them)))
  (comb-meta! me {:generic {}})
  me)


(defx defg
    e (n d)
  (eval e
    (list def n (list gen d))))


(defx defm
    e (g d as . xs)
  (letr (g (eval e g)
         d (eval e d)
         f (eval e (list* fn as xs))
         m (comb-meta g)
         r (m :generic))
      (comb-meta! g (assoc m :generic (assoc r d f)))))
