(defn signal
    (t . xs)
  (control cond k
    (list* signal t #(prompt cond (k it)) xs)))


(defn resignal
    (t k . xs)
  (k (apply signal (list* t xs))))


(defn signal?
    (r)
  (and (pair? r) (= (car r) signal)))


(defn handle
    (h g)
  (rec handle (res (prompt cond (g)))
    (if
     (signal? res) (handle (apply h (cdr res)))
     res)))


(defx with-guard
    e (x . hs)
  (handle
   (fn (t k . is)
     (rec handler (hs hs)
       (if (= () hs) (apply resignal (list* t k is))
           (let ((t0 fs0 x0 . hs0) hs)
             (if (= t0 t) (eval e (list let (list fs0 (list* qs k is)) x0))
                 (handler hs0))))))
   (fn () (eval e x))))
