
(defn s/next
    (k)
  (prompt s/visit (k :nil)))


(defn s/yield
    xs
  (control s/visit k (cons k xs)))


(defn s/init
    (g)
  (fn _ (prompt s/visit (g s/yield))))


(defn s/take
    (n g)
  (fn (v)
    (rec take (j 0 k (s/init g))
      (if
       (>= j n) :nil
       (let (p (s/next k))
         (if (not p) :nil
             (do (apply v (cdr p))
                 (take (inc j) (car p)))))))))


(defn s/take-while
    (t? g)
  (fn (v)
    (rec take-while (k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (apply t? (cdr p)) (do (apply v (cdr p)) (take-while (car p)))
         :nil)))))


(defn s/drop
    (n g)
  (fn (v)
    (rec drop (j 0 k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (< j n) (drop (inc j) (car p))
         (do (apply v (cdr p)) (drop j (car p))))))))


(defn s/drop-while
    (t? g)
  (fn (v)
    (rec drop-while (h? :t k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (and h? (apply t? (cdr p))) (drop-while :t (car p))
         (do (apply v (cdr p))
             (drop-while :f (car p))))))))


(defn s/filter
    (t? g)
  (fn (v)
    (rec filter (k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (apply t? (cdr p)) (do (apply v (cdr p)) (filter (car p)))
         (filter (car p)))))))


(defn s/reject
    (t? g)
  (s/filter #(not (t? it)) g))


(defn s/cycle
    (g)
  (fn (v)
    (rec cycle ()
      (g v)
      (cycle))))


;(todo make map that produces more input and mapcar that produces only one)
(defn s/map
    (f g)
  (fn (v)
    (g (fn xs (v (apply f xs))))))


(defn s/each
    (f g)
  (g f))


(defn s/with-state
    (i f g)
  (fn (v)
    (rec state (i i k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (state (apply f (list* v i (cdr p))) (car p)))))))


(defn s/dedup-by
    (tr g)
  (defn update-fn
      (v i . xs)
    (let (i1 (apply tr xs))
      (unless (= i1 i) (apply v xs))
      i1))
  (s/with-state :nil update-fn g))


(def s/dedup (part s/dedup-by id))


(defn s/uniq-by
    (tr g)
  (defn update
      (v i . xs)
    (let (k (apply tr xs))
      (when (not (map-get i k)) (apply v xs))
      (assoc i k :t)))
  (s/with-state {} update g))


(def s/uniq
  (part s/uniq-by id))


(defn s/list
    (g)
  (rec list (k (s/init g) rs ())
    (let (t (s/next k))
      (if
       (not t) (apply conc (rev rs))
       (list (car t) (cons (cdr t) rs))))))


(defn s/last
    (g)
  (rec last (k (s/init g) rs :nil)
    (let (t (s/next k))
      (if
       (not t) rs
       (last (car t) (cdr t))))))


(defn s/conc
    gs
  (fn (v)
    (rec conc (gs gs)
      (if
       (= gs ()) :nil
       (do ((car g) v) (conc (cdr gs)))))))


(defn s/iter
    (f i g)
  (fn (v)
    (rec iter (i i k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (let (i1 (apply f (cons i (cdr p))))
           (v i1)
           (iter i1 (car p))))))))


(defn s/every
    (n g)
  (fn (v)
    (rec every (j 1 a () k (s/init g))
      (let (p (s/next k))
        (if
         (not p) :nil
         (>= j n) (do (apply v (apply conc (rev (cons (cdr p) a))))
                      (every 1 () (car p)))
         (every (inc j) (cons (cdr p) a) (car p)))))))
