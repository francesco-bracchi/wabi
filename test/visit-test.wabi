(defn nat
    (yld)
  (rec nat (j 0)
    (yld j)
    (nat (inc j))))

(defn foo
    (yld)
  (yld 1 2 3)
  (yld 4 5 6)
  (yld 7 8 9)
  :nil)

(defn bar
    (yld)
  (yld 10)
  (yld 2)
  (yld 10)
  (yld 4)
  (yld 5)
  (yld 5)
  (yld 5)
  (yld 5)
  (yld 5)
  (yld 4)
  :nil)

(defn fibv
    (yld)
  (rec fib (i 0 j 1)
    (yld j)
    (fib j (+ i j))))

(test (-> nat
          (s/reject #(<= it 100))
          (s/map inc)
          (s/drop 4)
          (s/take 10)
          (s/drop 2)
          (s/iter + 0)
          (s/drop-while #(< it 500))
          (s/take-while #(< it 800))
          (s/list))
      '(550 663 777))

(test (s/list foo) '(1 2 3 4 5 6 7 8 9))

(test (-> bar s/dedup s/list) (list 10 2 10 4 5 4))

(test (-> nat (s/take 10) (s/every 3) (s/map +) (s/list)) '(3 12 21))

(test (-> fibv (s/take 35) (s/last)) '(9227465))
