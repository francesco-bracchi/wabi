(pr "test.wabi");

(def q (fx _ (p) p))

(pr "(a b c)" (q (a b c)))

(def qs (fx _ p p))

(pr "(a b c)" (qs a b c))

(def id (wrap q))

(pr "5" (id (+ 2 3)))

(def list (wrap qs))

(pr "(3 4)" (list 3 (+ 2 2)))

(def env (fx e _ e))

(pr "env" (env))

(def apply
  (wrap
   (fx _ (o as)
     (eval (env) (cons (unwrap o) as)))))

(pr "6" (apply + (list 1 2 3)))

(def list*
  (wrap
   (fx _ (a . as)
     (if
       (nil? as) a
       (cons a (apply list* as))))))


(pr "(1 2 3 4)" (list* 1 2 (list 3 4)))

(def fn
  (fx e (as . bs)
    (wrap (eval e (list* fx _ as bs)))))

(def defx
  (fx e (n e1 as . bs)
    (eval e
      (list def n (list* fx e1 as bs)))))

(def defn
  (fx e (n as . bs)
    (eval e
      (list def n (list* fn as bs)))))

;; (pr "()" (if))

;; (pr "10" (if (+ 4 6)))

;; (pr "4" (if true (* 2 2)))

;; (pr "()" (if false (+ 2 3)))

;; (pr "ciccio" (if false (+ 2 3) (q ciccio)))

;; (pr "seif" (if false (q first) true (q seif) (q third)))

;; fib

(defn fib
    (n)
  (if
   (= n 0) 0
   (= n 1) 1
   (= n 2) 2
   (+ (fib (- n 1)) (fib (- n 2)))))

(def n 10)

(def t0 (clock))

(pr (list (q fib) n) (fib n))

(def t (clock))

(pr "time" (/ (- t t0) 1000) "ms")

;; end fib

(def kkk (prompt callcc (+ 10 20)))


(defx test
    e (a b)
  (def ax (eval e a))
  (def bx (eval e b))
  (pr (q test)
      (list (q =) a b)
      (if
       (= ax bx) "ok"
       (list "error" ax bx))))


;; if
;; zero terms -> nil
;; one term evaluates to that term
;; two more terms -> if the first term is truish the second term, otherwise apply to the rest

(test (if) nil)

;; if just one term evaluates to term
;; (forall (e gen-term) (= e (if e)))
(test (if true) true)
(test (if 10) 10)
(test (if false) false)
(test (if nil) nil)

(test (if nil "true") nil)
(test (if false "true") nil)
(test (if true "true") "true")
(test (if 10 "true") "true")

(defn odds
    (cs)
  (if
   (nil? cs) nil
   (cons (car cs) (evens (cdr cs)))))

(defn evens
    (cs)
  (if
   (nil? cs) nil
   (odds (cdr cs))))


(test (odds nil) nil)
(test (evens nil) nil)
(test (odds (qs 1)) (qs 1))
(test (evens (qs 1)) nil)
(test (odds (list 1 2 3 4 5 6 8)) (list 1 3 5 8))
(test (evens (list 1 2 3 4 5 6 8)) (list 2 4 6))

(defx when
    e (t? . b)
  (eval e
    (list if t? (list* do b))))

(defx unless
    e (t? . b)
  (eval e
    (list* when (list not t?) b)))


(test (when true 20 10) 10)
(test (when false 20 10) nil)
(test (unless true 20 10) nil)
(test (unless false 20 10) 10)
