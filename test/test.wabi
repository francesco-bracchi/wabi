(pr "test.wabi");

(def q (fx _ (p) p))

(pr "(a b c)" (q (a b c)))

(def qs (fx _ p p))

(pr "(a b c)" (qs a b c))

(def id (wrap q))

(pr "5" (id (+ 2 3)))

(def list (wrap qs))

(pr "(3 4)" (list 3 (+ 2 2)))

(def env (fx e _ e))

(pr "env" (env))

(def apply
  (wrap
   (fx _ (o as)
     (eval (env) (cons (unwrap o) as)))))

(pr "6" (apply + (list 1 2 3)))

(def list*
  (wrap
   (fx _ (a . as)
     (cond
       (nil? as) a
       (cons a (apply list* as))))))


(pr "(1 2 3 4)" (list* 1 2 (list 3 4)))

(def fn
  (fx e (as . bs)
    (wrap (eval e (list* fx _ as bs)))))

(def defx
  (fx e (n e1 as . bs)
    (eval e
      (list def n (list* fx e1 as bs)))))

(def defn
  (fx e (n as . bs)
    (eval e
      (list def n (list* fn as bs)))))

;; (pr "()" (cond))

;; (pr "10" (cond (+ 4 6)))

;; (pr "4" (cond true (* 2 2)))

;; (pr "()" (cond false (+ 2 3)))

;; (pr "ciccio" (cond false (+ 2 3) (q ciccio)))

;; (pr "second" (cond false (q first) true (q second) (q third)))

;; fib

(defn fib (n)
  (cond
   (< n 2) n
   (+ (fib (- n 1)) (fib (- n 2)))))

(def n 100)

(def t0 (clock))

(pr (list (q fib) n) (fib n))

(def t (clock))

(pr "time" (/ (- t t0) 1000) "ms")

;; end fib

(def kkk (prompt callcc (+ 10 20)))

(pr "30" kkk)





;; (pr (list (q fib) n) (fib n))

;; (defn evens
;;     (cs)
;;   (if (nil? cs) nil
;;       (cons (car cs) (odds (cdr cs)))))

;; (defn odds
;;     (cs)
;;   (if (nil? cs) nil
;;       (evens (cdr cs))))

;; (defx loop
;;     e (n bs . xs)
;;   (do
;;    (def e1 (epush e))
;;    (eval e1 (list* defn n (evens bs) xs))
;;    (eval e1 (list* n (odds bs)))))

;; ;; (loop rec (a 10)
;; ;;      (do (pr (q rec))
;; ;;          (if (<= a 0) (q ok)
;; ;;              (do (pr a) (rec (- a 1))))))

;; (defx cond
;;     e cs
;;   (loop cond (cs cs)
;;        (if (nil? cs) nil
;;            (if (nil? (cdr cs))
;;                (eval e (car cs))
;;                (if (eval e (car cs))
;;                    (eval e (car (cdr cs)))
;;                    (cond (cdr (cdr cs))))))))

;; (defx time
;;     e as
;;   (def e1 (env-push
;;   (do (def t0 (pr (clock)))
;;       (def r (pr (eval e (list* do as))))
;;       (def t (pr (clock)))
;;       (pr as)
;;       (pr "time: " (- t t0))
;;       r))
