ctrl: (f . as)
envr: e
cont: ((eval) . s)
--------------------------------------
ctrl: f
envr: e
cont: ((eval) (apply e0 as) . s)


ctrl: c when (sym? c)
envr: e
cont: ((eval) . s)
--------------------------------------
ctrl: (lookup c e)
envr: e
cont: s

ctrl: c
envr: e
cont: ((eval) . s)
--------------------------------------
ctrl: c
envr: e
cont: s

ctrl: c when (oper? c)
envr: e
cont: ((apply e0 as) . s)
--------------------------------------
ctrl: as
envr: nil
cont: ((call e0 c) . s)


ctrl: c when (app? c)
envr: e
cont: ((apply e0 nil) . s)
--------------------------------------
ctrl: nil
envr: nil
cont: ((call nil c) . s)


ctrl: c when (app? c)
envr: e
cont: ((apply e0 (a . as)) . s)
--------------------------------------
ctrl: a
envr: e0
cont: ((eval) (args e0 as nil) (call nil c) . s)


ctrl: x
envr: e
cont: ((args e0 nil xs) . s)
--------------------------------------
ctrl: (reverse (cons x xs))
envr: e
cont: s


ctrl: x
envr: e
cont: ((args e0 (a . as) xs) . s)
--------------------------------------
ctrl: a
envr: e0
cont: ((eval) (args e0 as (x . xs)) . s)


ctrl: as
envr: e
cont: ((call e0 (fx e1 ex ps b)) . s)
--------------------------------------
control b
envr: (bind ex e0 ps as)
cont: ((eval) . s)


ctrl: as
envr: e
cont: ((call e0 #builtin) . s)
--------------------------------------
(btcall bt as &s)


ctrl: false | nil
envr: e
cont: ((sel e0 l r) . s)
--------------------------------------
ctrl: r
envr: e0
cont: ((eval) . s)


ctrl: _
envr: e
cont: ((sel e0 l r) . s)
--------------------------------------
ctrl: l
envr: e0
cont: ((eval) . s)


ctrl: x0
envr: e
cont: ((prog e0 nil) . s)
--------------------------------------
ctrl: x0
envr: nil
cont: s


ctrl: x0
envr: e
cont: ((prog e0 (x . xs)) . s)
--------------------------------------
ctrl: x
envr: e0
cont: ((prog e0 xs) . s)


ctrl: as
envr: e
cont: ((def e0 ps) . s)
--------------------------------------
ctrl: (last vs)
envr: e0
cont: s // (bind e0 ps as)


ctrl: x0
envr: e
cont: nil
--------------------------------------
WIN!
